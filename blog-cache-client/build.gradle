buildscript {

    repositories {
        mavenCentral()
        //jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        //classpath("org.ajoberstar:grgit:2.2.1")
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'nebula.ospackage'


def moduleVersion = "${project.version}"
version = "${project.version}-${gitAbbRevision}"

dependencies {
    compile project(":blog-domain")

    compile("org.springframework.ws:spring-ws-core:${springWSVersion}")
    compile("org.springframework:spring-context-support:${springVersion}")

    compile("org.apache.commons:commons-dbcp2:${commonDBCP2Version}")
    compile("com.google.code.gson:gson:${gsonVersion}")
    compile("org.apache.logging.log4j:log4j-web:2.1")
}

configurations { all*.exclude module: 'spring-boot-starter-logging' }

ospackage {
    packageName = "${project.name}"
    version = "${project.version}"
    release = '1'
    arch = I386
    os = LINUX
    user = 'deploy'
    permissionGroup = 'deploy'
}

buildRpm {
    requires('ps-acs-init', "${version}", EQUAL)

    directory("/opt/aspira/apps/psacs/${project.name}", 0744)

    from("build/libs") {
        fileMode = 0755
        createDirectoryEntry = false
        addParentDirs = false
        into "/opt/aspira/apps/psacs/${project.name}"

        rename { String fileName ->
            "${project.name}.jar"
        }
    }

    from("src/main/spring-shell") {
        fileMode = 0755
        createDirectoryEntry = false
        addParentDirs = false
        into "/opt/aspira/apps/psacs/${project.name}"
    }

}


task getVersions(dependsOn: processResources) {
    doLast {
        def separator = System.getProperty('line.separator')
        def version = project.version.toString()
        boolean success = new File("$buildDir/resources/main/version.properties").delete()
        def file = new File("$buildDir/resources/main/version.properties")
        //file.write("project.version=${version}$separator")
        file << "project.version=${moduleVersion}$separator"
        file << "git.version=${gitRevision}$separator"
        file << "git.abbreviated.version=${gitAbbRevision}$separator"
    }
}

classes {
    dependsOn getVersions
}
